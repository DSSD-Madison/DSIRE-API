/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./api/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  CategoryEnum: 1 | 2
  StateEnum: 2 | 1 | 5 | 4 | 3 | 6 | 7 | 8 | 10 | 9 | 12 | 60 | 13 | 14 | 15 | 19 | 16 | 17 | 18 | 20 | 21 | 22 | 25 | 24 | 23 | 59 | 26 | 27 | 29 | 31 | 28 | 30 | 38 | 39 | 32 | 34 | 35 | 36 | 33 | 37 | 40 | 41 | 42 | 44 | 45 | 43 | 46 | 47 | 48 | 49 | 50 | 11 | 51 | 54 | 53 | 52 | 55 | 57 | 56 | 58
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Program: { // root type
    id: number; // Int!
    name?: string | null; // String
  }
  ProgramCategory: { // root type
    id: number; // Int!
    name?: string | null; // String
  }
  Query: {};
  State: { // root type
    id: number; // Int!
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Program: { // field return type
    id: number; // Int!
    name: string | null; // String
    program_Category: NexusGenRootTypes['ProgramCategory'] | null; // ProgramCategory
    state: NexusGenRootTypes['State'] | null; // State
  }
  ProgramCategory: { // field return type
    id: number; // Int!
    name: string | null; // String
  }
  Query: { // field return type
    allPrograms: NexusGenRootTypes['Program'][]; // [Program!]!
    programs: NexusGenRootTypes['Program'][]; // [Program!]!
  }
  State: { // field return type
    id: number; // Int!
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Program: { // field return type name
    id: 'Int'
    name: 'String'
    program_Category: 'ProgramCategory'
    state: 'State'
  }
  ProgramCategory: { // field return type name
    id: 'Int'
    name: 'String'
  }
  Query: { // field return type name
    allPrograms: 'Program'
    programs: 'Program'
  }
  State: { // field return type name
    id: 'Int'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
  Query: {
    programs: { // args
      category?: NexusGenEnums['CategoryEnum'] | null; // CategoryEnum
      pageSize?: number | null; // Int
      state?: NexusGenEnums['StateEnum'] | null; // StateEnum
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}