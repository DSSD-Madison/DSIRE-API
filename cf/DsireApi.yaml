AWSTemplateFormatVersion: "2010-09-09"
Description: Infrastructure for the DSIRE API ecosystem



Parameters:

  VpcId:
    Type: String
    Default: vpc-02aebef18a7738b6a
    Description: The ID of the VPC holding the programs database

  SecurityGroupId:
    Type: String
    Default: sg-034ea701a79012c14
    Description: The ID of the security group managing the programs database

  SubnetIds:
    Type: CommaDelimitedList
    Default: "subnet-0e968dd68b1557a24"
      # TODO We want to run in all AZs?
      # - subnet-00ff385195c1dbdb5
      # - subnet-02563ccf50bd2aba3
      # - subnet-0b828c335bdc547f1
      # - subnet-03903f9e5abb3a1f3
      # - subnet-0962f733fc73508f8
    Description: The VPC subnets to replicate entities across

  GraphQLPathPart:
    Type: String
    Default: graphql
    Description: The path component for the GraphQL API (https://root-url.com/${Name}/api/${GraphQLPathPart}/...)
    AllowedPattern: "[a-zA-Z0-9-]+"

  VerificationPathPart:
    Type: String
    Default: verification
    Description: The path component for the verification API (https://root-url.com/${Name}/api/${VerificationPathPart}/...)
    AllowedPattern: "[a-zA-Z0-9-]+"



Resources:

  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: DsireApi
      Description: Proxied two-stage edge gateway for the DSIRE API
      EndpointConfiguration:
        Types:
          - EDGE

  ApiResource:
    Type: AWS::ApiGateway::Resource
    DependsOn: Api
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: "api"

  GraphQLResource:
    Type: AWS::ApiGateway::Resource
    DependsOn: Api
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt ApiResource.ResourceId
      PathPart: !Ref GraphQLPathPart

  VerificationResource:
    Type: AWS::ApiGateway::Resource
    DependsOn: Api
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt ApiResource.ResourceId
      PathPart: !Ref VerificationPathPart

  AgnesProxyResource:
    Type: AWS::ApiGateway::Resource
    DependsOn: Api
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt GraphQLResource.ResourceId
      PathPart: "{proxy+}"

  BettyProxyResource:
    Type: AWS::ApiGateway::Resource
    DependsOn: Api
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt VerificationResource.ResourceId
      PathPart: "{proxy+}"

  AgnesProxyMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: AgnesProxyResource
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref AgnesProxyResource
      AuthorizationType: NONE
      # TODO Lock this down?
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        # Mandatory for AWS_PROXY/lambda integration
        IntegrationHttpMethod: POST
        Uri: !Join ["", [!Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:", "${stageVariables.agnes}", "/invocations"]]

  BettyProxyMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: BettyProxyResource
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref BettyProxyResource
      AuthorizationType: NONE
      # TODO Lock this down?
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        # Mandatory for AWS_PROXY/lambda integration
        IntegrationHttpMethod: POST
        Uri: !Join ["", [!Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:", "${stageVariables.betty}", "/invocations"]]


  HandlerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DsireApiHandler
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        # TODO Wildcard
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                # TODO Wildcard
                Resource: "*"
          PolicyName: AllowVpcNetworking



Outputs:

  SecurityGroupId:
    Value: !Ref SecurityGroupId
    Export:
      Name: DsireApi-SecurityGroupId

  SubnetIds:
    Value: !Join [",", !Ref SubnetIds]
    Export:
      Name: DsireApi-SubnetIds


  ApiId:
    Value: !Ref Api
    Export:
      Name: DsireApi-ApiId

  ApiUrl:
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/"
    Export:
      Name: DsireApi-ApiUrl
    Description: The root (unstaged) URL for the DSIRE API

  HandlerRoleArn:
    Value: !GetAtt HandlerRole.Arn
    Export:
      Name: DsireApi-HandlerRoleArn
