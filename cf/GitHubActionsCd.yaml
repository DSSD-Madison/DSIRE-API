AWSTemplateFormatVersion: "2010-09-09"
Description: "Use GitHub for package and hosting CD via OIDC"



Parameters:

  GitHubOIDCThumbprint:
    Type: String
    Default: 6938FD4D98BAB03FAADB97B34396831E3780AEA1

  GitHubOrgName:
    Type: String
    Default: DSSD-Madison

  GitHubRepoName:
    Type: String
    Default: DSIRE-API



Resources:

  GitHubOIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ThumbprintList:
        - !Ref GitHubOIDCThumbprint
      ClientIdList:
        - sts.amazonaws.com

  GitHubActionsRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GitHubOIDCProvider
    Properties:
      RoleName: GitHubActions
      Description: The role assumed by GitHub Actions from the configured organization & repository
      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html
      # So this is a trust policy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Action: sts:AssumeRoleWithWebIdentity
          Principal:
            Federated:
              !GetAtt GitHubOIDCProvider.Arn
          Condition:
            StringEquals:
              token.actions.githubusercontent.com:aud: sts.amazonaws.com
            StringLike:
              token.actions.githubusercontent.com:sub: !Sub
                # TODO restrict * to only CD branches/refs
                - repo:${ORG}/${REPO}:*
                - ORG: !Ref GitHubOrgName
                  REPO: !Ref GitHubRepoName
      # Policies:
      #   # And this is a permission policy
      #   - PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         # https://aws.amazon.com/blogs/security/writing-iam-policies-how-to-grant-access-to-an-amazon-s3-bucket/
      #         # Grant list-contents access to MyBucket
      #         - Effect: Allow
      #           Action: s3:ListBucket
      #           Resource: !GetAtt PackageBucket.Arn
      #         # Grant retrieve/insert/delete access on all objects (*) in MyBucket
      #         - Effect: Allow
      #           Action:
      #             - s3:GetObject
      #             - s3:PutObject
      #             - s3:DeleteObject
      #           Resource: !Join ["/", [!GetAtt PackageBucket.Arn, "*"]]
      #     PolicyName: GitHubActionsS3RWX
      # TODO wildcard (replace managed allow-all policies with minimal customer policies, as above)
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
