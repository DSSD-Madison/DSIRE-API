name: AWS CD
run-name: Build, deploy, and provision AWS

on:
  push:
    branches:
      - main
      - staging
      - testing
  workflow_dispatch:
    inputs:
      forceSync:
        description: "Overwrite all remote content with this build (purge testing)"
        type: boolean
        required: false

permissions:
  id-token: write
  contents: read

jobs:

  build:
    name: Build/bundle TS & package API
    runs-on: ubuntu-latest
    environment: AWS_Development

    steps:
      - name: Checkout ${{ github.ref_name }}
        uses: actions/checkout@v3

      - name: Setup Node.js environment version ${{ vars.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ vars.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci package.json

      - name: Build & bundle for production
        run: NODE_ENV=production npm run build --if-present
        if: github.ref_name == 'main'
      - name: Build & bundle for staging
        run: NODE_ENV=development npm run build --if-present
        if: github.ref_name == 'staging'
      - name: Build & bundle for testing
        run: NODE_ENV=development npm run build --if-present
        if: github.ref_name == 'testing'

      - name: Zip API package
        run: zip -j dist/api-${{ github.ref_name }}.zip dist/api/*

      - name: Upload API package as artifact
        uses: actions/upload-artifact@v3
        with:
          name: api-${{ github.ref_name }}
          path: dist/*.zip

  sync-packages-s3:
    name: Sync API package with S3
    runs-on: ubuntu-latest
    environment: AWS_Development
    needs: build

    steps:
      - name: Checkout ${{ github.ref_name }}
        uses: actions/checkout@v3

      - name: Download API package as artifact
        uses: actions/download-artifact@v3
        with:
          name: api-${{ github.ref_name }}
          path: dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
      - name: Sync package with S3
        run: chmod +x .github/sync-packages.sh; GITHUB_REF_NAME=${{ github.ref_name }} FORCE=${{ inputs.forceSync }} .github/sync-packages.sh

  cloudformation:
    name: Deploy CloudFormation stacks
    runs-on: ubuntu-latest
    environment: AWS_Development
    needs:
      - build
      - sync-packages-s3

    steps:
      - name: Checkout ${{ github.ref_name }}
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}

      - name: Deploy GitHubActionsCd & DsireApi stacks
        run: |
          aws cloudformation deploy --template-file aws/CloudFormation/GitHubActionsCd.yaml --tags product=DsireApi --stack-name GitHubActionsCd --capabilities CAPABILITY_NAMED_IAM
          aws cloudformation deploy --template-file aws/CloudFormation/DsireApi.yaml --tags product=DsireApi --stack-name DsireApi --capabilities CAPABILITY_NAMED_IAM

  render-sync-content-s3:
    name: Render & sync content with S3
    runs-on: ubuntu-latest
    environment: AWS_Development
    needs: cloudformation

    steps:
      - name: Checkout ${{ github.ref_name }}
        uses: actions/checkout@v3

      - name: Copy content to distribution context
        run: mkdir -p dist/frontend && cp -r frontend dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
      - name: Get root API URL (for rendering {% API_URL %})
        run: echo "API_URL=$(aws cloudformation --region us-east-1 list-exports --query "Exports[?Name=='ApiUrl'].Value" --no-paginate --output text)" >> $GITHUB_ENV
      - name: Render and sync content with S3
        run: chmod +x .github/render-sync-content.sh; GITHUB_REF_NAME=${{ github.ref_name }} API_URL=$API_URL FORCE=${{ inputs.forceSync }} .github/render-sync-content.sh

      - name: Upload content as artifact
        uses: actions/upload-artifact@v3
        with:
          name: frontend-${{ github.ref_name }}
          path: dist/frontend/*
